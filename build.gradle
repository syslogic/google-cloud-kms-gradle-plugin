// :buildSrc
buildscript {
    ext {
        pluginGroup = buildSrc.versions.plugin.group.get()
        pluginName = buildSrc.versions.plugin.name.get()
        pluginDesc = buildSrc.versions.plugin.desc.get()
        pluginIdentifier = buildSrc.versions.plugin.identifier.get()
        pluginCls = buildSrc.versions.plugin.cls.get()
        pluginId = buildSrc.versions.plugin.id.get()
        pluginVersion = buildSrc.versions.plugin.id.get()
        githubDev = buildSrc.versions.github.dev.get()
        githubHandle = buildSrc.versions.github.handle.get()
        githubEmail = buildSrc.versions.github.email.get()
    }
}

plugins {
    alias(buildSrc.plugins.gradle.plugin)
    alias(buildSrc.plugins.maven.publish)
}

dependencies {
    compileOnly(gradleApi())
    implementation(libs.annotations)
    testImplementation(gradleTestKit())
    testImplementation(libs.annotations)
    testImplementation(libs.junit)
    testImplementation(project)
}

gradlePlugin {
    plugins {
        CloudKmsPlugin {
            id = pluginId
            displayName = pluginName
            description = pluginDesc
            implementationClass = pluginCls
        }
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.withType(Jar).configureEach {
    archiveBaseName.set("${pluginIdentifier}-${pluginVersion}")
    archiveVersion.set("${pluginVersion}")
}

tasks.register("javadocs", Javadoc) {
    title = "${pluginName} API"
    source = java.sourceSets.main.java.srcDirs
    destinationDir = project.file("/build/outputs/javadoc")
    classpath = files(new File(System.getProperty("java.home") + File.separator + "lib" + File.separator + "rt.jar"))
    classpath += configurations.runtimeClasspath
    options.links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    options.linkSource true
    options.author true
    failOnError false
}

tasks.register("javadocJar", Jar) {
    archiveClassifier.set("javadoc")
    from(javadoc.destinationDir)
    dependsOn javadoc
}

tasks.register("sourcesJar", Jar) {
    from java.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

group = pluginGroup
version = pluginVersion

artifacts {
    archives(javadocJar)
    archives(sourcesJar)
}

publishing {
    repositories {
        if (System.getenv("GITHUB_ACTOR") != null && System.getenv("GITHUB_TOKEN") != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${githubHandle}/${pluginIdentifier}")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
    publications {
        release(MavenPublication) {
            from(components.getByName("java"))
            groupId = pluginGroup
            artifactId = pluginIdentifier
            version = pluginVersion
            pom {
                name = pluginName
                description = pluginDesc
                url = "https://github.com/${githubHandle}/${pluginIdentifier}"
                scm {
                    connection = "scm:git:git://github.com/${githubHandle}/${pluginIdentifier}.git"
                    developerConnection = "scm:git:ssh://github.com/${githubHandle}/${pluginIdentifier}.git"
                    url = "https://github.com/${githubHandle}/${pluginIdentifier}/"
                }
                developers {
                    developer {
                        name = githubDev
                        id = githubHandle
                        email = githubEmail
                    }
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
            }
        }
    }
}
